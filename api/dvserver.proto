syntax = "proto3";

package depviz.server;

import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
//import "protoc-gen-swagger/options/annotations.proto";

import "dvmodel.proto";

option go_package = "moul.io/depviz/internal/dvserver";
option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

service DepvizService {
  rpc Graph(Graph.Input) returns (Graph.Output) { option (google.api.http) = {get: "/graph"}; };
  rpc StoreDump(StoreDump.Input) returns (StoreDump.Output) { option (google.api.http) = {get: "/store/dump"}; };
  rpc Ping(Ping.Input) returns (Ping.Output) { option (google.api.http) = {get: "/ping"}; };
  rpc Status(Status.Input) returns (Status.Output) { option (google.api.http) = {get: "/status"}; };
}

message Graph {
  message Input {
    repeated string targets = 1;
    bool with_closed = 2;
    bool without_isolated = 3;
    bool without_prs = 4 [(gogoproto.customname) = "WithoutPRs"];
    bool without_external_deps = 5;
    bool with_fetch = 6;
  }
  message Output {
    repeated depviz.model.Task tasks = 1;
  }
}

message StoreDump {
  message Input {}
  message Output {
    depviz.model.Batch batch = 1;
  }
}

message Ping {
  message Input {}
  message Output {
    string message = 1;
  }
}

message Status {
  message Input {}
  message Output {
    bool everything_is_ok = 1 [(gogoproto.customname) = "EverythingIsOK"];
  }
}
