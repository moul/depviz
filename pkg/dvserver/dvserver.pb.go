// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dvserver.proto

package dvserver

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	dvmodel "moul.io/depviz/v3/pkg/dvmodel"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Graph struct {
}

func (m *Graph) Reset()         { *m = Graph{} }
func (m *Graph) String() string { return proto.CompactTextString(m) }
func (*Graph) ProtoMessage()    {}
func (*Graph) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{0}
}
func (m *Graph) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Graph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Graph.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Graph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Graph.Merge(m, src)
}
func (m *Graph) XXX_Size() int {
	return m.Size()
}
func (m *Graph) XXX_DiscardUnknown() {
	xxx_messageInfo_Graph.DiscardUnknown(m)
}

var xxx_messageInfo_Graph proto.InternalMessageInfo

type Graph_Input struct {
	Targets             []string `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	WithClosed          bool     `protobuf:"varint,2,opt,name=with_closed,json=withClosed,proto3" json:"with_closed,omitempty"`
	WithoutIsolated     bool     `protobuf:"varint,3,opt,name=without_isolated,json=withoutIsolated,proto3" json:"without_isolated,omitempty"`
	WithoutPRs          bool     `protobuf:"varint,4,opt,name=without_prs,json=withoutPrs,proto3" json:"without_prs,omitempty"`
	WithoutExternalDeps bool     `protobuf:"varint,5,opt,name=without_external_deps,json=withoutExternalDeps,proto3" json:"without_external_deps,omitempty"`
	WithFetch           bool     `protobuf:"varint,6,opt,name=with_fetch,json=withFetch,proto3" json:"with_fetch,omitempty"`
}

func (m *Graph_Input) Reset()         { *m = Graph_Input{} }
func (m *Graph_Input) String() string { return proto.CompactTextString(m) }
func (*Graph_Input) ProtoMessage()    {}
func (*Graph_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{0, 0}
}
func (m *Graph_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Graph_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Graph_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Graph_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Graph_Input.Merge(m, src)
}
func (m *Graph_Input) XXX_Size() int {
	return m.Size()
}
func (m *Graph_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Graph_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Graph_Input proto.InternalMessageInfo

func (m *Graph_Input) GetTargets() []string {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *Graph_Input) GetWithClosed() bool {
	if m != nil {
		return m.WithClosed
	}
	return false
}

func (m *Graph_Input) GetWithoutIsolated() bool {
	if m != nil {
		return m.WithoutIsolated
	}
	return false
}

func (m *Graph_Input) GetWithoutPRs() bool {
	if m != nil {
		return m.WithoutPRs
	}
	return false
}

func (m *Graph_Input) GetWithoutExternalDeps() bool {
	if m != nil {
		return m.WithoutExternalDeps
	}
	return false
}

func (m *Graph_Input) GetWithFetch() bool {
	if m != nil {
		return m.WithFetch
	}
	return false
}

type Graph_Output struct {
	Tasks []*dvmodel.Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (m *Graph_Output) Reset()         { *m = Graph_Output{} }
func (m *Graph_Output) String() string { return proto.CompactTextString(m) }
func (*Graph_Output) ProtoMessage()    {}
func (*Graph_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{0, 1}
}
func (m *Graph_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Graph_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Graph_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Graph_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Graph_Output.Merge(m, src)
}
func (m *Graph_Output) XXX_Size() int {
	return m.Size()
}
func (m *Graph_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Graph_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Graph_Output proto.InternalMessageInfo

func (m *Graph_Output) GetTasks() []*dvmodel.Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type StoreDump struct {
}

func (m *StoreDump) Reset()         { *m = StoreDump{} }
func (m *StoreDump) String() string { return proto.CompactTextString(m) }
func (*StoreDump) ProtoMessage()    {}
func (*StoreDump) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{1}
}
func (m *StoreDump) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreDump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreDump.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreDump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreDump.Merge(m, src)
}
func (m *StoreDump) XXX_Size() int {
	return m.Size()
}
func (m *StoreDump) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreDump.DiscardUnknown(m)
}

var xxx_messageInfo_StoreDump proto.InternalMessageInfo

type StoreDump_Input struct {
}

func (m *StoreDump_Input) Reset()         { *m = StoreDump_Input{} }
func (m *StoreDump_Input) String() string { return proto.CompactTextString(m) }
func (*StoreDump_Input) ProtoMessage()    {}
func (*StoreDump_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{1, 0}
}
func (m *StoreDump_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreDump_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreDump_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreDump_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreDump_Input.Merge(m, src)
}
func (m *StoreDump_Input) XXX_Size() int {
	return m.Size()
}
func (m *StoreDump_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreDump_Input.DiscardUnknown(m)
}

var xxx_messageInfo_StoreDump_Input proto.InternalMessageInfo

type StoreDump_Output struct {
	Batch *dvmodel.Batch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (m *StoreDump_Output) Reset()         { *m = StoreDump_Output{} }
func (m *StoreDump_Output) String() string { return proto.CompactTextString(m) }
func (*StoreDump_Output) ProtoMessage()    {}
func (*StoreDump_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{1, 1}
}
func (m *StoreDump_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreDump_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreDump_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreDump_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreDump_Output.Merge(m, src)
}
func (m *StoreDump_Output) XXX_Size() int {
	return m.Size()
}
func (m *StoreDump_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreDump_Output.DiscardUnknown(m)
}

var xxx_messageInfo_StoreDump_Output proto.InternalMessageInfo

func (m *StoreDump_Output) GetBatch() *dvmodel.Batch {
	if m != nil {
		return m.Batch
	}
	return nil
}

type Ping struct {
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{2}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return m.Size()
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

type Ping_Input struct {
}

func (m *Ping_Input) Reset()         { *m = Ping_Input{} }
func (m *Ping_Input) String() string { return proto.CompactTextString(m) }
func (*Ping_Input) ProtoMessage()    {}
func (*Ping_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{2, 0}
}
func (m *Ping_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping_Input.Merge(m, src)
}
func (m *Ping_Input) XXX_Size() int {
	return m.Size()
}
func (m *Ping_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Ping_Input proto.InternalMessageInfo

type Ping_Output struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Ping_Output) Reset()         { *m = Ping_Output{} }
func (m *Ping_Output) String() string { return proto.CompactTextString(m) }
func (*Ping_Output) ProtoMessage()    {}
func (*Ping_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{2, 1}
}
func (m *Ping_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping_Output.Merge(m, src)
}
func (m *Ping_Output) XXX_Size() int {
	return m.Size()
}
func (m *Ping_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Ping_Output proto.InternalMessageInfo

func (m *Ping_Output) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Status struct {
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{3}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

type Status_Input struct {
}

func (m *Status_Input) Reset()         { *m = Status_Input{} }
func (m *Status_Input) String() string { return proto.CompactTextString(m) }
func (*Status_Input) ProtoMessage()    {}
func (*Status_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{3, 0}
}
func (m *Status_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status_Input.Merge(m, src)
}
func (m *Status_Input) XXX_Size() int {
	return m.Size()
}
func (m *Status_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Status_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Status_Input proto.InternalMessageInfo

type Status_Output struct {
	EverythingIsOK bool `protobuf:"varint,1,opt,name=everything_is_ok,json=everythingIsOk,proto3" json:"everything_is_ok,omitempty"`
}

func (m *Status_Output) Reset()         { *m = Status_Output{} }
func (m *Status_Output) String() string { return proto.CompactTextString(m) }
func (*Status_Output) ProtoMessage()    {}
func (*Status_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3aef303a4c4cd2, []int{3, 1}
}
func (m *Status_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status_Output.Merge(m, src)
}
func (m *Status_Output) XXX_Size() int {
	return m.Size()
}
func (m *Status_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Status_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Status_Output proto.InternalMessageInfo

func (m *Status_Output) GetEverythingIsOK() bool {
	if m != nil {
		return m.EverythingIsOK
	}
	return false
}

func init() {
	proto.RegisterType((*Graph)(nil), "depviz.server.Graph")
	proto.RegisterType((*Graph_Input)(nil), "depviz.server.Graph.Input")
	proto.RegisterType((*Graph_Output)(nil), "depviz.server.Graph.Output")
	proto.RegisterType((*StoreDump)(nil), "depviz.server.StoreDump")
	proto.RegisterType((*StoreDump_Input)(nil), "depviz.server.StoreDump.Input")
	proto.RegisterType((*StoreDump_Output)(nil), "depviz.server.StoreDump.Output")
	proto.RegisterType((*Ping)(nil), "depviz.server.Ping")
	proto.RegisterType((*Ping_Input)(nil), "depviz.server.Ping.Input")
	proto.RegisterType((*Ping_Output)(nil), "depviz.server.Ping.Output")
	proto.RegisterType((*Status)(nil), "depviz.server.Status")
	proto.RegisterType((*Status_Input)(nil), "depviz.server.Status.Input")
	proto.RegisterType((*Status_Output)(nil), "depviz.server.Status.Output")
}

func init() { proto.RegisterFile("dvserver.proto", fileDescriptor_af3aef303a4c4cd2) }

var fileDescriptor_af3aef303a4c4cd2 = []byte{
	// 602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcb, 0x6e, 0xda, 0x4e,
	0x14, 0xc6, 0x63, 0x12, 0x43, 0x18, 0x04, 0x89, 0x26, 0xfa, 0x4b, 0xfe, 0x3b, 0xa9, 0x89, 0xbc,
	0x22, 0x8b, 0x7a, 0x24, 0xa2, 0xee, 0xba, 0xa2, 0x24, 0x15, 0x6a, 0xa5, 0x20, 0x13, 0xa9, 0x6a,
	0x37, 0xd6, 0x80, 0x27, 0xc6, 0xc2, 0x78, 0x2c, 0xcf, 0xd8, 0xbd, 0x2c, 0xfb, 0x04, 0x95, 0xfa,
	0x20, 0x7d, 0x8d, 0x2e, 0x23, 0x75, 0xd3, 0x55, 0x54, 0x41, 0x17, 0xdd, 0xf6, 0x0d, 0xaa, 0xb9,
	0x40, 0x2e, 0xa5, 0xbb, 0x39, 0xdf, 0xf7, 0x9d, 0xdf, 0xcc, 0x1c, 0x06, 0x83, 0x56, 0x58, 0x32,
	0x92, 0x97, 0x24, 0xf7, 0xb2, 0x9c, 0x72, 0x0a, 0x9b, 0x21, 0xc9, 0xca, 0xf8, 0x83, 0xa7, 0x44,
	0xfb, 0x28, 0xa2, 0x34, 0x4a, 0x08, 0xc2, 0x59, 0x8c, 0x70, 0x9a, 0x52, 0x8e, 0x79, 0x4c, 0x53,
	0xa6, 0xc2, 0xf6, 0xe3, 0x28, 0xe6, 0xd3, 0x62, 0xec, 0x4d, 0xe8, 0x1c, 0x45, 0x34, 0xa2, 0x48,
	0xca, 0xe3, 0xe2, 0x4a, 0x56, 0xb2, 0x90, 0x2b, 0x1d, 0x6f, 0x86, 0xe5, 0x9c, 0x86, 0x24, 0x51,
	0xa5, 0xfb, 0xa5, 0x02, 0xcc, 0xe7, 0x39, 0xce, 0xa6, 0xf6, 0x6f, 0x03, 0x98, 0x83, 0x34, 0x2b,
	0x38, 0xb4, 0x40, 0x8d, 0xe3, 0x3c, 0x22, 0x9c, 0x59, 0xc6, 0xf1, 0x76, 0xa7, 0xee, 0xaf, 0x4a,
	0xd8, 0x06, 0x8d, 0xb7, 0x31, 0x9f, 0x06, 0x93, 0x84, 0x32, 0x12, 0x5a, 0x95, 0x63, 0xa3, 0xb3,
	0xeb, 0x03, 0x21, 0x3d, 0x93, 0x0a, 0x3c, 0x01, 0xfb, 0xa2, 0xa2, 0x05, 0x0f, 0x62, 0x46, 0x13,
	0xcc, 0x49, 0x68, 0x6d, 0xcb, 0xd4, 0x9e, 0xd6, 0x07, 0x5a, 0x86, 0x48, 0xb1, 0x44, 0x34, 0xcb,
	0x99, 0xb5, 0x23, 0x52, 0xbd, 0xd6, 0xe2, 0xa6, 0x0d, 0x5e, 0x29, 0x79, 0xe8, 0x33, 0xc5, 0x16,
	0xeb, 0x9c, 0xc1, 0x2e, 0xf8, 0x6f, 0xd5, 0x40, 0xde, 0x71, 0x92, 0xa7, 0x38, 0x09, 0x42, 0x92,
	0x31, 0xcb, 0x94, 0x1b, 0x1c, 0x68, 0xf3, 0x4c, 0x7b, 0x7d, 0x92, 0x31, 0xf8, 0x08, 0x48, 0x42,
	0x70, 0x45, 0xf8, 0x64, 0x6a, 0x55, 0x65, 0xb0, 0x2e, 0x94, 0x73, 0x21, 0xd8, 0x5d, 0x50, 0xbd,
	0x28, 0xb8, 0xb8, 0x73, 0x07, 0x98, 0x1c, 0xb3, 0x99, 0xba, 0x71, 0xa3, 0x0b, 0x3d, 0xfd, 0x13,
	0xa8, 0x59, 0x5d, 0x62, 0x36, 0xf3, 0x55, 0xc0, 0x1d, 0x80, 0xfa, 0x88, 0xd3, 0x9c, 0xf4, 0x8b,
	0x79, 0x66, 0xd7, 0xf4, 0xcc, 0xec, 0xd3, 0x35, 0xe9, 0x04, 0x98, 0x63, 0x2c, 0x76, 0x33, 0x8e,
	0x8d, 0x4e, 0xa3, 0x7b, 0x70, 0x9f, 0xd4, 0x13, 0x96, 0xaf, 0x12, 0xee, 0x29, 0xd8, 0x19, 0xc6,
	0x69, 0x74, 0x4b, 0x71, 0xd7, 0x14, 0x0b, 0xd4, 0xe6, 0x84, 0x31, 0x1c, 0x11, 0xc9, 0xa9, 0xfb,
	0xab, 0xd2, 0x7d, 0x0d, 0xaa, 0x23, 0x8e, 0x79, 0xc1, 0x6e, 0xdb, 0xce, 0xd7, 0x6d, 0x4f, 0xc1,
	0x3e, 0x29, 0x49, 0xfe, 0x9e, 0x4f, 0xe3, 0x34, 0x0a, 0x62, 0x16, 0xd0, 0x99, 0xec, 0xdf, 0xed,
	0xc1, 0xc5, 0x4d, 0xbb, 0x75, 0xb6, 0xf6, 0x06, 0xec, 0xe2, 0x85, 0xdf, 0x22, 0x77, 0xeb, 0x59,
	0xf7, 0x57, 0x05, 0x34, 0xfb, 0xf2, 0xb4, 0x23, 0x92, 0x97, 0xf1, 0x84, 0xc0, 0xa1, 0x7e, 0x1d,
	0xd0, 0xf6, 0xee, 0xbd, 0x49, 0x4f, 0xaa, 0x9e, 0xda, 0xfe, 0x70, 0xa3, 0xa7, 0x4e, 0xe4, 0xb6,
	0x3e, 0x7e, 0xfb, 0xf9, 0xb9, 0xb2, 0x0b, 0xab, 0x28, 0x92, 0x20, 0x7c, 0x67, 0x7c, 0xd0, 0x79,
	0xd0, 0xb9, 0x76, 0x34, 0xb9, 0xfd, 0x4f, 0x5f, 0xd3, 0x0f, 0x24, 0xbd, 0x09, 0x1b, 0x88, 0x09,
	0x0b, 0x85, 0x82, 0xfa, 0x52, 0x8d, 0x15, 0xfe, 0xff, 0xa0, 0x5b, 0x88, 0x1a, 0x6c, 0x6f, 0xb2,
	0x34, 0xb3, 0x29, 0x99, 0x35, 0x68, 0xa2, 0x4c, 0x50, 0x2e, 0x57, 0xf3, 0x86, 0x87, 0x7f, 0x9d,
	0x46, 0xc8, 0x9a, 0x78, 0xb4, 0xd9, 0xd4, 0xcc, 0x3d, 0xc9, 0xac, 0xc3, 0x1a, 0x62, 0x52, 0xef,
	0x3d, 0xf9, 0xba, 0x70, 0x8c, 0xeb, 0x85, 0x63, 0xfc, 0x58, 0x38, 0xc6, 0xa7, 0xa5, 0xb3, 0x75,
	0xbd, 0x74, 0xb6, 0xbe, 0x2f, 0x9d, 0xad, 0x37, 0x87, 0x73, 0x5a, 0x24, 0x5e, 0x4c, 0x91, 0xe2,
	0xa1, 0x6c, 0x16, 0xa1, 0xd5, 0xf7, 0x61, 0x5c, 0x95, 0xff, 0xda, 0xd3, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x74, 0x59, 0x35, 0x4f, 0x32, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DepvizServiceClient is the client API for DepvizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DepvizServiceClient interface {
	Graph(ctx context.Context, in *Graph_Input, opts ...grpc.CallOption) (*Graph_Output, error)
	StoreDump(ctx context.Context, in *StoreDump_Input, opts ...grpc.CallOption) (*StoreDump_Output, error)
	Ping(ctx context.Context, in *Ping_Input, opts ...grpc.CallOption) (*Ping_Output, error)
	Status(ctx context.Context, in *Status_Input, opts ...grpc.CallOption) (*Status_Output, error)
}

type depvizServiceClient struct {
	cc *grpc.ClientConn
}

func NewDepvizServiceClient(cc *grpc.ClientConn) DepvizServiceClient {
	return &depvizServiceClient{cc}
}

func (c *depvizServiceClient) Graph(ctx context.Context, in *Graph_Input, opts ...grpc.CallOption) (*Graph_Output, error) {
	out := new(Graph_Output)
	err := c.cc.Invoke(ctx, "/depviz.server.DepvizService/Graph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depvizServiceClient) StoreDump(ctx context.Context, in *StoreDump_Input, opts ...grpc.CallOption) (*StoreDump_Output, error) {
	out := new(StoreDump_Output)
	err := c.cc.Invoke(ctx, "/depviz.server.DepvizService/StoreDump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depvizServiceClient) Ping(ctx context.Context, in *Ping_Input, opts ...grpc.CallOption) (*Ping_Output, error) {
	out := new(Ping_Output)
	err := c.cc.Invoke(ctx, "/depviz.server.DepvizService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depvizServiceClient) Status(ctx context.Context, in *Status_Input, opts ...grpc.CallOption) (*Status_Output, error) {
	out := new(Status_Output)
	err := c.cc.Invoke(ctx, "/depviz.server.DepvizService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepvizServiceServer is the server API for DepvizService service.
type DepvizServiceServer interface {
	Graph(context.Context, *Graph_Input) (*Graph_Output, error)
	StoreDump(context.Context, *StoreDump_Input) (*StoreDump_Output, error)
	Ping(context.Context, *Ping_Input) (*Ping_Output, error)
	Status(context.Context, *Status_Input) (*Status_Output, error)
}

// UnimplementedDepvizServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDepvizServiceServer struct {
}

func (*UnimplementedDepvizServiceServer) Graph(ctx context.Context, req *Graph_Input) (*Graph_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Graph not implemented")
}
func (*UnimplementedDepvizServiceServer) StoreDump(ctx context.Context, req *StoreDump_Input) (*StoreDump_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreDump not implemented")
}
func (*UnimplementedDepvizServiceServer) Ping(ctx context.Context, req *Ping_Input) (*Ping_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedDepvizServiceServer) Status(ctx context.Context, req *Status_Input) (*Status_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterDepvizServiceServer(s *grpc.Server, srv DepvizServiceServer) {
	s.RegisterService(&_DepvizService_serviceDesc, srv)
}

func _DepvizService_Graph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Graph_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepvizServiceServer).Graph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depviz.server.DepvizService/Graph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepvizServiceServer).Graph(ctx, req.(*Graph_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepvizService_StoreDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreDump_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepvizServiceServer).StoreDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depviz.server.DepvizService/StoreDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepvizServiceServer).StoreDump(ctx, req.(*StoreDump_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepvizService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepvizServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depviz.server.DepvizService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepvizServiceServer).Ping(ctx, req.(*Ping_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepvizService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepvizServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depviz.server.DepvizService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepvizServiceServer).Status(ctx, req.(*Status_Input))
	}
	return interceptor(ctx, in, info, handler)
}

var _DepvizService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "depviz.server.DepvizService",
	HandlerType: (*DepvizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Graph",
			Handler:    _DepvizService_Graph_Handler,
		},
		{
			MethodName: "StoreDump",
			Handler:    _DepvizService_StoreDump_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DepvizService_Ping_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _DepvizService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dvserver.proto",
}

func (m *Graph) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Graph) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Graph) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Graph_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Graph_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Graph_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithFetch {
		i--
		if m.WithFetch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.WithoutExternalDeps {
		i--
		if m.WithoutExternalDeps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.WithoutPRs {
		i--
		if m.WithoutPRs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.WithoutIsolated {
		i--
		if m.WithoutIsolated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.WithClosed {
		i--
		if m.WithClosed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Targets) > 0 {
		for iNdEx := len(m.Targets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Targets[iNdEx])
			copy(dAtA[i:], m.Targets[iNdEx])
			i = encodeVarintDvserver(dAtA, i, uint64(len(m.Targets[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Graph_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Graph_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Graph_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDvserver(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StoreDump) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreDump) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreDump) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StoreDump_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreDump_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreDump_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StoreDump_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreDump_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreDump_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDvserver(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Ping_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Ping_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDvserver(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Status_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Status_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EverythingIsOK {
		i--
		if m.EverythingIsOK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDvserver(dAtA []byte, offset int, v uint64) int {
	offset -= sovDvserver(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Graph) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Graph_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, s := range m.Targets {
			l = len(s)
			n += 1 + l + sovDvserver(uint64(l))
		}
	}
	if m.WithClosed {
		n += 2
	}
	if m.WithoutIsolated {
		n += 2
	}
	if m.WithoutPRs {
		n += 2
	}
	if m.WithoutExternalDeps {
		n += 2
	}
	if m.WithFetch {
		n += 2
	}
	return n
}

func (m *Graph_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovDvserver(uint64(l))
		}
	}
	return n
}

func (m *StoreDump) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StoreDump_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StoreDump_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovDvserver(uint64(l))
	}
	return n
}

func (m *Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Ping_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Ping_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDvserver(uint64(l))
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Status_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Status_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EverythingIsOK {
		n += 2
	}
	return n
}

func sovDvserver(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDvserver(x uint64) (n int) {
	return sovDvserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Graph) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Graph: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Graph: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Graph_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDvserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDvserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithClosed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithClosed = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithoutIsolated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithoutIsolated = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithoutPRs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithoutPRs = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithoutExternalDeps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithoutExternalDeps = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithFetch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithFetch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Graph_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDvserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDvserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &dvmodel.Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreDump) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreDump: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreDump: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreDump_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreDump_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDvserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDvserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &dvmodel.Batch{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDvserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDvserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EverythingIsOK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EverythingIsOK = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDvserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDvserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDvserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDvserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDvserver
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDvserver
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDvserver
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDvserver        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDvserver          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDvserver = fmt.Errorf("proto: unexpected end of group")
)
